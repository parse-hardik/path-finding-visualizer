{"version":3,"sources":["Node.jsx","Queue.js","FindPath.js","Grid.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","row","col","isStart","isEnd","isWall","onMouseDown","onMouseEnter","onMouseUp","onMouseLeave","extraClassName","id","className","Component","Queue","items","data","push","length","shift","Algo","grid","start","end","name","distance","visitedNodes","allNodes","sortNodesByDistance","closest","console","log","Infinity","visited","updateNeighbors","dijkstra","open","closed","Array","fill","map","f","g","heurstic","gNew","hNew","fNew","dx","dy","sortNodesByF","curr","i","x","y","isValid","next","prev","calculateHValue","AStar","q","isEmpty","front","pop","BFS","DFSUtil","DFS","target","Math","abs","sqrt","min","neighbors","filter","neighbor","getUnvisitedNeighbors","node","unvisitedNodes","sort","nodeA","nodeB","openList","START","END","PathFinder","state","mouseDown","startNodePressed","endNodePressed","changingWallAllowed","algorithm","getInitialGrid","setState","getNode","shortestPath","last","setTimeout","document","getElementById","animateShortestPath","reverse","getShortestPath","animateAlgorithm","heuristic","newGrid","getNewGridWithWallToggled","class","href","role","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","setAlgo","visuaizeAlgorithm","presentable","clearBoard","clearPath","rowIdx","nodeIdx","slice","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e97a5688.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport './Node.css'\r\n\r\nexport default class Node extends Component {\r\n\trender() {\r\n\t\tconst {row, col, isStart, isEnd, isWall, onMouseDown, onMouseEnter, onMouseUp, onMouseLeave} = this.props;\r\n\t\tconst extraClassName = isStart ? 'node-start' : isEnd ? 'node-end' : isWall ? 'node-wall' : '';\r\n    return (\r\n\t\t\t<div \r\n\t\t\tid = {`node-${row}-${col}`} \r\n\t\t\tkey = {`node-${row}-${col}`} \r\n\t\t\tonMouseEnter = {()=>{onMouseEnter(row, col)}}\r\n\t\t\tonMouseDown = {()=>{onMouseDown(row, col)}}\r\n\t\t\tonMouseUp = {()=>{onMouseUp(row, col)}}\r\n\t\t\tclassName = {`node ${extraClassName}`}\r\n\t\t\tonMouseLeave = {()=>{onMouseLeave(row, col)}}>\r\n\t\t\t</div>\r\n\t\t);\r\n  }\r\n}\r\n","export default class Queue{\r\n  constructor(){\r\n    this.items = [];\r\n  }\r\n\r\n  push(data){\r\n    this.items.push(data)\r\n  }\r\n\r\n  isEmpty(){\r\n    return this.items.length === 0;\r\n  }\r\n\r\n  front(){\r\n    return this.items[0];\r\n  }\r\n\r\n  pop(){\r\n    if(this.items.length>0)\r\n      this.items.shift();\r\n  }\r\n}","import Queue from './Queue'\r\n\r\nexport default function Algo(grid, start, end, name){\r\n\tif(name === 'Dijkstra')\r\n\t\treturn dijkstra(grid, start, end)\r\n\tif(name === 'AStar')\r\n\t\treturn AStar(grid, start, end)\r\n\tif(name === 'BFS')\r\n\t\treturn BFS(grid, start, end)\r\n\tif(name === 'DFS')\r\n\t\treturn DFS(grid, start, end)\r\n}\r\n\r\nconst dx = [0,1,0,-1];\r\nconst dy = [1,0,-1,0];\r\n\r\nfunction DFSUtil(grid, curr, target, visitedNodes){\r\n\tif(!isValid(grid, curr.row, curr.col) || curr.visited || curr.isWall)\r\n\t\treturn false;\r\n\tif(curr===target){\r\n\t\tvisitedNodes.push(curr);\r\n\t\treturn true;\r\n\t}\r\n\tcurr.visited = true;\r\n\tvisitedNodes.push(curr);\r\n\tfor(let i=0;i<dx.length;i++){\r\n\t\tconst x = curr.row + dx[i];\r\n\t\tconst y = curr.col + dy[i];\r\n\t\tif(!isValid(grid, x, y) )\r\n\t\t\tcontinue;\r\n\t\tconst next = grid[x][y];\r\n\t\tif(next.visited === true || next.isWall === true)\r\n\t\t\tcontinue;\r\n\t\tnext.prev = curr;\r\n\t\tif(DFSUtil(grid, next, target, visitedNodes)) \r\n\t\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nfunction DFS(grid, start, end){\r\n\tconst visitedNodes = []\r\n\tDFSUtil(grid, start, end, visitedNodes);\r\n\treturn visitedNodes;\r\n}\r\n\r\nfunction BFS(grid, start, end){\r\n\tstart.distance = 0;\r\n\tconst visitedNodes = []\r\n\tconst q = new Queue();\r\n\tq.push(start);\r\n\tconst dx = [0,1,0,-1];\r\n\tconst dy = [1,0,-1,0];\r\n\twhile(!q.isEmpty()){\r\n\t\tconst curr = q.front();\r\n\t\tq.pop();\r\n\t\tif(curr.visited === true || curr.isWall === true)\r\n\t\t\tcontinue;\r\n\t\tcurr.visited = true;\r\n\t\tvisitedNodes.push(curr);\r\n\t\tif(curr === end)\r\n\t\t\treturn visitedNodes;\r\n\t\tfor(let i=0;i<dx.length;i++){\r\n\t\t\tconst x = curr.row + dx[i];\r\n\t\t\tconst y = curr.col + dy[i];\r\n\t\t\tif(!isValid(grid, x, y))\r\n\t\t\t\tcontinue;\r\n\t\t\tconst next = grid[x][y];\r\n\t\t\tif(next.visited === true)\r\n\t\t\t\tcontinue;\r\n\t\t\tnext.prev = curr;\r\n\t\t\tq.push(next);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction AStar(grid, start, end){\r\n\tconst open = [], visited = [];\r\n\tconst closed = new Array(grid.length).fill(false).map(() =>new Array(grid[0].length).fill(false));\r\n\tstart.f=0;\r\n\tstart.g=0; \r\n\tstart.heurstic=0;\r\n\topen.push(start);\r\n\t// const dx = [-1,-1,-1,0,0,1,1,1];\r\n\t// const dy = [-1,0,1,-1,1,-1,0,1];\r\n\tconst dx = [0,1,0,-1];\r\n\tconst dy = [1,0,-1,0];\r\n\tlet gNew, hNew, fNew;\r\n\twhile(open.length){\r\n\t\tsortNodesByF(open);\r\n\t\tconst curr = open.shift();\r\n\t\tvisited.push(curr);\r\n\t\tclosed[curr.row][curr.col] = true;\r\n\t\tfor(let i=0;i<dx.length;i++){\r\n\t\t\tconst x = dx[i] + curr.row;\r\n\t\t\tconst y = dy[i] + curr.col;\r\n\t\t\tif(!isValid(grid, x, y))\r\n\t\t\t\tcontinue;\r\n\t\t\tconst next = grid[x][y];\r\n\t\t\tif(next === end){\r\n\t\t\t\tnext.prev = curr;\r\n\t\t\t\tvisited.push(next);\r\n\t\t\t\treturn visited;\r\n\t\t\t}\r\n\t\t\tif(closed[x][y] === false && next.isWall === false){\r\n\t\t\t\tgNew = curr.g + 1.0;\r\n\t\t\t\thNew = calculateHValue(next, end);\r\n\t\t\t\tfNew = gNew + hNew;\r\n\t\t\t\tif(next.f === Infinity || next.f > fNew){\r\n\t\t\t\t\topen.push(next);\r\n\t\t\t\t\tnext.f = fNew;\r\n\t\t\t\t\tnext.g = gNew; \r\n\t\t\t\t\tnext.heurstic = hNew;\r\n\t\t\t\t\tnext.prev = curr;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn visited;\r\n}\r\n\r\nfunction calculateHValue(next, end){\r\n\tconst dx = Math.abs(next.row - end.row);\r\n\tconst dy = Math.abs(next.col - end.col);\r\n\treturn (dx+dy) + (Math.sqrt(2) - 2)*Math.min(dx,dy);\r\n}\r\n\r\nfunction dijkstra(grid, start, end){\r\n\tstart.distance = 0;\r\n\tconst visitedNodes = [];\r\n\tconst allNodes = [];\r\n\tfor(const row of grid){\r\n\t\tfor(const col of row)\r\n\t\t\tallNodes.push(col);\r\n\t}\r\n\twhile(allNodes.length){\r\n\t\tsortNodesByDistance(allNodes);\r\n\t\tconst closest = allNodes.shift();\r\n\t\tif(closest.isWall){\r\n\t\t\tconsole.log(closest.row, closest.col);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif(closest.distance === Infinity)\r\n\t\t\treturn visitedNodes;\r\n\t\tclosest.visited = true;\r\n\t\tvisitedNodes.push(closest);\r\n\t\tupdateNeighbors(grid, closest);\r\n\t\tif(closest === end)\r\n\t\t\treturn visitedNodes;\r\n\t}\r\n}\r\n\r\nfunction isValid(grid, row, col){\r\n\tif(row<0 || row>= grid.length || col<0 || col>= grid[0].length)\r\n\t\treturn false;\r\n\treturn true;\r\n}\r\n\r\nfunction updateNeighbors(grid, curr){\r\n\tconst neighbors = getUnvisitedNeighbors(grid, curr);\r\n\tfor(const node of neighbors){\r\n\t\tnode.distance = curr.distance+1;\r\n\t\tnode.prev = curr;\r\n\t}\r\n}\r\n\r\nexport function getShortestPath(allNodes, start){\r\n\tconst shortestPath = [];\r\n\tlet curr = allNodes[allNodes.length-1];\r\n\tcurr = curr.prev;\r\n\twhile(curr!==start ){\r\n\t\tshortestPath.push(curr);\r\n\t\tconsole.log(curr);\r\n\t\tcurr = curr.prev;\r\n\t}\r\n\t// shortestPath.push(start);\r\n\tshortestPath.reverse();\r\n\treturn shortestPath;\r\n}\r\n\r\nfunction getUnvisitedNeighbors(grid, curr){\r\n\tconst neighbors = [];\r\n\tconst {row, col} = curr;\r\n\tif(row>0) neighbors.push(grid[row-1][col]);\r\n\tif(row<grid.length-1) neighbors.push(grid[row+1][col]);\r\n\tif(col>0) neighbors.push(grid[row][col-1]);\r\n\tif(col<grid[0].length-1) neighbors.push(grid[row][col+1]);\r\n\treturn neighbors.filter(neighbor => !neighbor.visited);\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction sortNodesByF(openList){\r\n\topenList.sort((nodeA, nodeB) => nodeA.f - nodeB.f)\r\n}","import { Component } from \"react\";\r\nimport Node from \"./Node\";\r\nimport \"./Grid.css\";\r\nimport Algo, { getShortestPath } from \"./FindPath\";\r\nconst ROWS = 15;\r\nconst COLS = 50;\r\nconst START = [7, 15];\r\nconst END = [11, 25];\r\n\r\nexport default class PathFinder extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseDown: false,\r\n      start: START,\r\n      end: END,\r\n\t\t\tstartNodePressed: false,\r\n\t\t\tendNodePressed: false,\r\n      changingWallAllowed: true,\r\n      algorithm: '',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    // console.log(grid);\r\n    this.setState({ grid: grid });\r\n  }\r\n\r\n  getInitialGrid() {\r\n    const grid = [];\r\n    for (let row = 0; row < ROWS; row++) {\r\n      const curr = [];\r\n      for (let col = 0; col < COLS; col++) {\r\n        curr.push(getNode(row, col));\r\n      }\r\n      grid.push(curr);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  setAlgo(name){\r\n    this.setState({algorithm: name})\r\n  }\r\n\r\n  animateAlgorithm(allNodes, shortestPath, last) {\r\n    for (let i = 0; i < allNodes.length; i++) {\r\n      const node = allNodes[i];\r\n      if (\r\n        !(node.row === this.state.end[0] && node.col === this.state.end[1]) &&\r\n        !(node.row === this.state.start[0] && node.col === this.state.start[1])\r\n      )\r\n        setTimeout(() => {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-visited\";\r\n        }, 10 * i);\r\n      if (\r\n        i === allNodes.length - 1 &&\r\n        last.row === this.state.end[0] &&\r\n        last.col === this.state.end[1]\r\n      ) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(shortestPath);\r\n        }, 10 * i);\r\n      }\r\n    }\r\n  }\r\n\r\n  animateShortestPath(shortestPath) {\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      setTimeout(() => {\r\n        const node = shortestPath[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest\";\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visuaizeAlgorithm() {\r\n    const { grid } = this.state;\r\n    // console.log('grid', grid)\r\n\t\tconsole.log('start', this.state.start)\r\n\t\tconsole.log('end', this.state.end)\r\n    const start = grid[this.state.start[0]][this.state.start[1]];\r\n    const end = grid[this.state.end[0]][this.state.end[1]];\r\n    if(this.state.algorithm === '')\r\n      return;\r\n    console.log('algorithm', this.state.algorithm )\r\n    const allNodes = Algo(grid, start, end, this.state.algorithm);\r\n    const last = allNodes[allNodes.length - 1];\r\n    console.log(allNodes);\r\n    const shortestPath = getShortestPath(allNodes, start);\r\n    console.log(shortestPath)\r\n    this.animateAlgorithm(allNodes, shortestPath, last);\r\n  }\r\n\r\n  clearBoard() {\r\n    const { grid } = this.state;\r\n    for (let row = 0; row < ROWS; row++) {\r\n      for (let col = 0; col < COLS; col++) {\r\n        grid[row][col].isWall = false;\r\n        grid[row][col].distance = Infinity;\r\n        grid[row][col].visited = false;\r\n        grid[row][col].prev = null;\r\n        grid[row][col].f = Infinity;\r\n        grid[row][col].g = Infinity;\r\n        grid[row][col].heuristic = Infinity;\r\n        document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n      }\r\n    }\r\n    document.getElementById(`node-${START[0]}-${START[1]}`).className =\r\n      \"node node-start\";\r\n    document.getElementById(`node-${END[0]}-${END[1]}`).className =\r\n      \"node node-end\";\r\n    this.setState({ grid: grid, start:START, end: END });\r\n  }\r\n\r\n  clearPath() {\r\n    const { grid } = this.state;\r\n    for (let row = 0; row < ROWS; row++) {\r\n      for (let col = 0; col < COLS; col++) {\r\n        // grid[row][col].isWall = false;\r\n\t\t\t\tgrid[row][col].prev = null;\r\n\t\t\t\tgrid[row][col].distance = Infinity;\r\n\t\t\t\tgrid[row][col].visited = false;\r\n        grid[row][col].f = Infinity;\r\n        grid[row][col].g = Infinity;\r\n        grid[row][col].heuristic = Infinity;\r\n        if (\r\n          (row === this.state.start[0] && col === this.state.start[1]) ||\r\n          (row === this.state.end[0] && col === this.state.end[1]) || grid[row][col].isWall === true\r\n        )\r\n          continue;\r\n        document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n      }\r\n    }\r\n    this.setState({ grid: grid }, ()=>{\r\n\t\t\tconsole.log(this.state.grid)\r\n\t\t});\r\n\t\t\r\n  }\r\n\r\n  onMouseEnter(row, col) {\r\n    if (this.state.mouseDown === false) return;\r\n    const { grid } = this.state;\r\n\t\tif(this.state.startNodePressed === true && grid[row][col].isWall === false){\r\n      console.log('Line 132, row: ',row, ' col: ',col, 'grid', grid[row][col])\r\n\t\t\tthis.setState({start: [row, col]}, () =>{\r\n\t\t\t\tconsole.log('LINE 152 ', this.state.start)\r\n\t\t\t})\r\n\t\t\tdocument.getElementById(`node-${row}-${col}`).className = \"node node-start\";\r\n      console.log('grid', grid)\r\n\t\t}\r\n    else if(this.state.endNodePressed === true && grid[row][col].isWall === false){\r\n      this.setState({end: [row, col]}, () =>{\r\n\t\t\t\t// console.log('LINE 152 ', this.state.start)\r\n\t\t\t})\r\n\t\t\tdocument.getElementById(`node-${row}-${col}`).className = \"node node-end\";\r\n    }\r\n    else if(this.state.startNodePressed === false && this.state.endNodePressed === false){\r\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid, mouseDown: true });\r\n    }\r\n  }\r\n\r\n\tonMouseLeave(row, col) {\r\n\t\tif (this.state.startNodePressed === false && this.state.endNodePressed === false) return;\r\n\t\t// if(\r\n\t\t// \t(row === this.state.start[0] && col === this.state.start[1]) ||\r\n\t\t// \t(row === this.state.end[0] && col === this.state.end[1])\r\n\t\t// )\r\n    const {grid} = this.state;\r\n    if(grid[row][col].isWall === true && this.state.changingWallAllowed === false) return;\r\n    document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n    // console.log('here')\r\n    grid[row][col].isWall = false;\r\n    grid[row][col].prev = null;\r\n    grid[row][col].distance = Infinity;\r\n    grid[row][col].visited = false;\r\n    this.setState({ grid: grid});\r\n\t}\r\n\r\n  onMouseDown(row, col) {\r\n    if (\r\n      !(\r\n        (row === this.state.start[0] && col === this.state.start[1]) ||\r\n        (row === this.state.end[0] && col === this.state.end[1])\r\n      )\r\n    ) {\r\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid });\r\n    }\r\n\t\telse if(row === this.state.start[0] && col === this.state.start[1]){\r\n\t\t\tthis.setState({startNodePressed: true}, ()=>{\r\n\t\t\t\tconsole.log('startNodePressed set to true')\r\n\t\t\t});\r\n      this.setState({changingWallAllowed: false})\r\n\t\t}\r\n\t\telse if(row === this.state.end[0] && col === this.state.end[1]){\r\n      this.setState({endNodePressed: true}, ()=>{\r\n\t\t\t\tconsole.log('endNodePressed set to true')\r\n\t\t\t});\r\n      this.setState({changingWallAllowed: false})\r\n    }\r\n    this.setState({ mouseDown: true });\r\n  }\r\n\r\n  onMouseUp(row, col) {\r\n\t\tif( row === this.state.start[0] && col === this.state.start[1] ){\r\n      this.setState({startNodePressed: false});\r\n      this.setState({changingWallAllowed: true})\r\n    }\r\n\t\telse if(row === this.state.end[0] && col === this.state.end[1]){\r\n      this.setState({endNodePressed: false});\r\n      this.setState({changingWallAllowed: true})\r\n    }\r\n    this.setState({ mouseDown: false });\r\n  }\r\n\r\n  presentable(){\r\n    if(this.state.algorithm === 'Dijkstra')\r\n      return 'Dijstra\\'s!'\r\n    if(this.state.algorithm === 'AStar')\r\n      return 'A* Search!'\r\n    if(this.state.algorithm === 'BFS')\r\n      return 'BFS!'\r\n    if(this.state.algorithm === 'DFS')\r\n      return 'DFS!'\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <>\r\n        <nav class=\"navbar navbar-dark bg-dark navbar-expand-sm\">\r\n          <a class=\"navbar-brand fsize pad\" href=\"#\">\r\n            PathFinder\r\n          </a>\r\n          {/* <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbar-list-3\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n\t\t\t\t\t\t<span class=\"navbar-toggler-icon\"></span>Hello\r\n\t\t\t\t\t</button> */}\r\n          <div class=\"collapse navbar-collapse\" id=\"navbar-list-3\">\r\n            <ul class=\"navbar-nav\">\r\n              <li class=\"nav-item dropdown\">\r\n                <a\r\n                  class=\"nav-link dropdown-toggle cwhite fsize algo\"\r\n                  href=\"#\"\r\n                  id=\"navbarDropdownMenuLink\"\r\n                  role=\"button\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Algorithms\r\n                </a>\r\n                <div\r\n                  class=\"dropdown-menu bg-dark\"\r\n                  aria-labelledby=\"navbarDropdownMenuLink\"\r\n                >\r\n                  <a class=\"dropdown-item cwhite\" href=\"#\" onClick = {() =>this.setAlgo('Dijkstra')}>\r\n                    Dijkstra\r\n                  </a>\r\n                  <a class=\"dropdown-item cwhite\" href=\"#\" onClick = {() =>this.setAlgo('AStar')}>\r\n                    A* Search\r\n                  </a>\r\n                  <a class=\"dropdown-item cwhite\" href=\"#\" onClick = {() =>this.setAlgo('BFS')}>\r\n                    BFS\r\n                  </a>\r\n                  <a class=\"dropdown-item cwhite\" href=\"#\" onClick = {() =>this.setAlgo('DFS')}>\r\n                    DFS\r\n                  </a>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n        <button\r\n          className=\"container vertical-center bg-dark cwhite fsize\"\r\n          onClick={() => this.visuaizeAlgorithm()}\r\n        >\r\n          Visualize {this.presentable()}\r\n        </button>\r\n        <button\r\n          className=\"container clear-board bg-dark cwhite fsize\"\r\n          onClick={() => this.clearBoard()}\r\n        >\r\n          Clear Board \r\n        </button>\r\n        <button\r\n          className=\"container clear-path bg-dark cwhite fsize\"\r\n          onClick={() => this.clearPath()}\r\n        >\r\n          Clear Path\r\n        </button>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx} className=\"rowgap\">\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isWall } = node;\r\n                  const isStart =\r\n                    row === this.state.start[0] && col === this.state.start[1] ? true : false;\r\n                  const isEnd = row === this.state.end[0] && col === this.state.end[1] ? true : false;\r\n                  return (\r\n                    <Node\r\n                      row={row}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isEnd={isEnd}\r\n                      isWall={isWall}\r\n                      onMouseEnter={(row, col) => this.onMouseEnter(row, col)}\r\n                      onMouseDown={(row, col) => this.onMouseDown(row, col)}\r\n                      onMouseUp={(row, col) => this.onMouseUp(row, col)}\r\n\t\t\t\t\t\t\t\t\t\t\tonMouseLeave={(row, col) => this.onMouseLeave(row, col)}/>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getNode = (row, col) => {\r\n  return {\r\n    row,\r\n    col,\r\n    distance: Infinity,\r\n    visited: false,\r\n    prev: null,\r\n    isWall: false,\r\n    f: Infinity, \r\n    g: Infinity, \r\n    heuristic: Infinity,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import './App.css';\nimport PathFinder from './Grid'\nfunction App() {\n  return (\n    <div>\n      <PathFinder />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
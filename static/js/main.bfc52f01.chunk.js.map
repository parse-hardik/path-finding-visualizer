{"version":3,"sources":["Node.jsx","Queue.js","FindPath.js","Grid.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","row","col","isStart","isEnd","isWall","onMouseDown","onMouseEnter","onMouseUp","onMouseLeave","extraClassName","id","className","Component","Queue","items","data","push","length","shift","Algo","grid","start","end","name","distance","visitedNodes","allNodes","sortNodesByDistance","closest","console","log","Infinity","visited","updateNeighbors","dijkstra","open","closed","Array","fill","map","f","g","heurstic","gNew","hNew","fNew","dx","dy","sortNodesByF","curr","i","x","y","isValid","next","prev","calculateHValue","AStar","q","isEmpty","front","pop","BFS","DFSUtil","DFS","updateHeuristicNeighbors","GreedyBFS","sourceQueue","targetQueue","source","Set","target","add","currSource","has","currTarget","Bi_BFS","Math","abs","sqrt","min","neighbors","getUnvisitedNeighbors","node","getShortestPath","shortestPath","reverse","filter","neighbor","unvisitedNodes","sort","nodeA","nodeB","openList","START","END","PathFinder","state","mouseDown","startNodePressed","endNodePressed","changingWallAllowed","algorithm","getInitialGrid","setState","getNode","last","setTimeout","document","getElementById","animateShortestPath","clearPath","sp1","sp2","concat","animateAlgorithm","heuristic","newGrid","getNewGridWithWallToggled","class","href","role","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","setAlgo","visuaizeAlgorithm","presentable","clearBoard","rowIdx","nodeIdx","slice","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bfc52f01.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport './Node.css'\r\n\r\nexport default class Node extends Component {\r\n\trender() {\r\n\t\tconst {row, col, isStart, isEnd, isWall, onMouseDown, onMouseEnter, onMouseUp, onMouseLeave} = this.props;\r\n\t\tconst extraClassName = isStart ? 'node-start' : isEnd ? 'node-end' : isWall ? 'node-wall' : '';\r\n    return (\r\n\t\t\t<div \r\n\t\t\tid = {`node-${row}-${col}`} \r\n\t\t\tkey = {`node-${row}-${col}`} \r\n\t\t\tonMouseEnter = {()=>{onMouseEnter(row, col)}}\r\n\t\t\tonMouseDown = {()=>{onMouseDown(row, col)}}\r\n\t\t\tonMouseUp = {()=>{onMouseUp(row, col)}}\r\n\t\t\tclassName = {`node ${extraClassName}`}\r\n\t\t\tonMouseLeave = {()=>{onMouseLeave(row, col)}}>\r\n\t\t\t</div>\r\n\t\t);\r\n  }\r\n}\r\n","export default class Queue{\r\n  constructor(){\r\n    this.items = [];\r\n  }\r\n\r\n  push(data){\r\n    this.items.push(data)\r\n  }\r\n\r\n  isEmpty(){\r\n    return this.items.length === 0;\r\n  }\r\n\r\n  front(){\r\n    return this.items[0];\r\n  }\r\n\r\n  pop(){\r\n    if(this.items.length>0)\r\n      this.items.shift();\r\n  }\r\n}","import Queue from './Queue'\r\n\r\nexport default function Algo(grid, start, end, name) {\r\n\tif (name === 'Dijkstra')\r\n\t\treturn dijkstra(grid, start, end)\r\n\tif (name === 'AStar')\r\n\t\treturn AStar(grid, start, end)\r\n\tif (name === 'BFS')\r\n\t\treturn BFS(grid, start, end)\r\n\tif (name === 'DFS')\r\n\t\treturn DFS(grid, start, end)\r\n\tif (name === 'GBFS')\r\n\t\treturn GreedyBFS(grid, start, end)\r\n\tif(name === 'BiBFS')\r\n\t\treturn Bi_BFS(grid, start, end)\r\n}\r\n\r\nconst dx = [0, 1, -1, 0];\r\nconst dy = [1, 0, 0, -1];\r\n\r\nfunction Bi_BFS(grid, start, end){\r\n\tconst sourceQueue = new Queue();\r\n\tconst targetQueue = new Queue();\r\n\tsourceQueue.push(start);\r\n\ttargetQueue.push(end);\r\n\tconst visitedNodes = [];\r\n\tconst source = new Set();\r\n\tconst target = new Set();\r\n\tsource.add(start);\r\n\ttarget.add(end);\r\n\twhile(!sourceQueue.isEmpty() && !targetQueue.isEmpty()){\r\n\t\tconst currSource = sourceQueue.front();\r\n\t\tsourceQueue.pop();\r\n\t\t// console.log('currSource ',currSource);\r\n\t\tif(target.has(currSource)){\r\n\t\t\tsource.add(currSource)\r\n\t\t\tconsole.log('Source Set=> ', source)\r\n\t\t\tconsole.log('Target Set=> ', target)\r\n\t\t\tvisitedNodes.push(currSource);\r\n\t\t\treturn visitedNodes;\r\n\t\t}\r\n\t\tconst currTarget = targetQueue.front();\r\n\t\ttargetQueue.pop();\r\n\t\t// console.log('currTarget ',currTarget);\r\n\t\tif(source.has(currTarget)){\r\n\t\t\ttarget.add(currTarget);\r\n\t\t\tconsole.log('Source Set=> ', source)\r\n\t\t\tconsole.log('Taget Set=> ', target)\r\n\t\t\tvisitedNodes.push(currTarget);\r\n\t\t\treturn visitedNodes;\r\n\t\t}\r\n\t\tif(!currSource.visited && !currSource.isWall){\r\n\t\t\tcurrSource.visited = true;\r\n\t\t\tvisitedNodes.push(currSource);\r\n\t\t\tsource.add(currSource);\r\n\t\t\tif(currSource === end)\r\n\t\t\t\treturn visitedNodes;\r\n\t\t\tfor(let i=0;i<dx.length;i++){\r\n\t\t\t\tconst x = currSource.row + dx[i];\r\n\t\t\t\tconst y = currSource.col + dy[i];\r\n\t\t\t\tif(!isValid(grid, x, y))\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tconst next = grid[x][y];\r\n\t\t\t\tif(target.has(next)){\r\n\t\t\t\t\tnext.prev = currSource;\r\n\t\t\t\t\tsource.add(next);\r\n\t\t\t\t\tconsole.log('Source Set=> ', source)\r\n\t\t\t\t\tconsole.log('Taget Set=> ', target)\r\n\t\t\t\t\tvisitedNodes.push(next);\r\n\t\t\t\t\treturn visitedNodes;\r\n\t\t\t\t}\r\n\t\t\t\tif(next.visited || next.isWall)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tnext.prev = currSource;\r\n\t\t\t\tsourceQueue.push(next);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!currTarget.visited && !currTarget.isWall){\r\n\t\t\tcurrTarget.visited = true;\r\n\t\t\tvisitedNodes.push(currTarget);\r\n\t\t\ttarget.add(currTarget);\r\n\t\t\tif(currTarget === start)\r\n\t\t\t\treturn visitedNodes;\r\n\t\t\tfor(let i=dx.length-1;i>=0;i--){\r\n\t\t\t\tconst x = currTarget.row + dx[i];\r\n\t\t\t\tconst y = currTarget.col + dy[i];\r\n\t\t\t\tif(!isValid(grid, x, y))\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tconst next = grid[x][y];\r\n\t\t\t\tif(source.has(next)){\r\n\t\t\t\t\tnext.prev = currTarget;\r\n\t\t\t\t\ttarget.add(next);\r\n\t\t\t\t\tconsole.log('Source Set=> ', source)\r\n\t\t\t\t\tconsole.log('Taget Set=> ', target)\r\n\t\t\t\t\tvisitedNodes.push(next);\r\n\t\t\t\t\treturn visitedNodes;\r\n\t\t\t\t}\r\n\t\t\t\tif(next.visited || next.isWall)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tnext.prev = currTarget;\r\n\t\t\t\ttargetQueue.push(next);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn visitedNodes;\r\n}\r\n\r\nfunction GreedyBFS(grid, start, end) {\r\n\tstart.distance = 0;\r\n\tconst visitedNodes = []\r\n\tconst allNodes = [];\r\n\tfor (const row of grid) {\r\n\t\tfor (const col of row)\r\n\t\t\tallNodes.push(col);\r\n\t}\r\n\twhile (allNodes.length) {\r\n\t\tsortNodesByDistance(allNodes);\r\n\t\tconst closest = allNodes.shift();\r\n\t\tif (closest.isWall)\r\n\t\t\tcontinue;\r\n\t\tif (closest.distance === Infinity)\r\n\t\t\treturn visitedNodes;\r\n\t\tclosest.visited = true;\r\n\t\tvisitedNodes.push(closest);\r\n\t\tupdateHeuristicNeighbors(grid, closest, end);\r\n\t\tif (closest === end)\r\n\t\t\treturn visitedNodes;\r\n\t}\r\n}\r\n\r\nfunction DFSUtil(grid, curr, target, visitedNodes) {\r\n\tif (!isValid(grid, curr.row, curr.col) || curr.visited || curr.isWall)\r\n\t\treturn false;\r\n\tif (curr === target) {\r\n\t\tvisitedNodes.push(curr);\r\n\t\treturn true;\r\n\t}\r\n\tcurr.visited = true;\r\n\tvisitedNodes.push(curr);\r\n\tfor (let i = 0; i < dx.length; i++) {\r\n\t\tconst x = curr.row + dx[i];\r\n\t\tconst y = curr.col + dy[i];\r\n\t\tif (!isValid(grid, x, y))\r\n\t\t\tcontinue;\r\n\t\tconst next = grid[x][y];\r\n\t\tif (next.visited === true || next.isWall === true)\r\n\t\t\tcontinue;\r\n\t\tnext.prev = curr;\r\n\t\tif (DFSUtil(grid, next, target, visitedNodes))\r\n\t\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nfunction DFS(grid, start, end) {\r\n\tconst visitedNodes = []\r\n\tDFSUtil(grid, start, end, visitedNodes);\r\n\treturn visitedNodes;\r\n}\r\n\r\nfunction BFS(grid, start, end) {\r\n\tstart.distance = 0;\r\n\tconst visitedNodes = []\r\n\tconst q = new Queue();\r\n\tq.push(start);\r\n\twhile (!q.isEmpty()) {\r\n\t\tconst curr = q.front();\r\n\t\tq.pop();\r\n\t\tif (curr.visited === true || curr.isWall === true)\r\n\t\t\tcontinue;\r\n\t\tcurr.visited = true;\r\n\t\tvisitedNodes.push(curr);\r\n\t\tif (curr === end)\r\n\t\t\treturn visitedNodes;\r\n\t\tfor (let i = 0; i < dx.length; i++) {\r\n\t\t\tconst x = curr.row + dx[i];\r\n\t\t\tconst y = curr.col + dy[i];\r\n\t\t\tif (!isValid(grid, x, y))\r\n\t\t\t\tcontinue;\r\n\t\t\tconst next = grid[x][y];\r\n\t\t\tif (next.visited === true)\r\n\t\t\t\tcontinue;\r\n\t\t\tnext.prev = curr;\r\n\t\t\tq.push(next);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction AStar(grid, start, end) {\r\n\tconst open = [], visited = [];\r\n\tconst closed = new Array(grid.length).fill(false).map(() => new Array(grid[0].length).fill(false));\r\n\tstart.f = 0;\r\n\tstart.g = 0;\r\n\tstart.heurstic = 0;\r\n\topen.push(start);\r\n\t// const dx = [-1,-1,-1,0,0,1,1,1];\r\n\t// const dy = [-1,0,1,-1,1,-1,0,1];\r\n\tconst dx = [0, 1, 0, -1];\r\n\tconst dy = [1, 0, -1, 0];\r\n\tlet gNew, hNew, fNew;\r\n\twhile (open.length) {\r\n\t\tsortNodesByF(open);\r\n\t\tconst curr = open.shift();\r\n\t\tvisited.push(curr);\r\n\t\tclosed[curr.row][curr.col] = true;\r\n\t\tfor (let i = 0; i < dx.length; i++) {\r\n\t\t\tconst x = dx[i] + curr.row;\r\n\t\t\tconst y = dy[i] + curr.col;\r\n\t\t\tif (!isValid(grid, x, y))\r\n\t\t\t\tcontinue;\r\n\t\t\tconst next = grid[x][y];\r\n\t\t\tif (next === end) {\r\n\t\t\t\tnext.prev = curr;\r\n\t\t\t\tvisited.push(next);\r\n\t\t\t\treturn visited;\r\n\t\t\t}\r\n\t\t\tif (closed[x][y] === false && next.isWall === false) {\r\n\t\t\t\tgNew = curr.g + 1.0;\r\n\t\t\t\thNew = calculateHValue(next, end);\r\n\t\t\t\tfNew = gNew + hNew;\r\n\t\t\t\tif (next.f === Infinity || next.f > fNew) {\r\n\t\t\t\t\topen.push(next);\r\n\t\t\t\t\tnext.f = fNew;\r\n\t\t\t\t\tnext.g = gNew;\r\n\t\t\t\t\tnext.heurstic = hNew;\r\n\t\t\t\t\tnext.prev = curr;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn visited;\r\n}\r\n\r\nfunction calculateHValue(next, end) {\r\n\tconst dx = Math.abs(next.row - end.row);\r\n\tconst dy = Math.abs(next.col - end.col);\r\n\treturn (dx + dy) + (Math.sqrt(2) - 2) * Math.min(dx, dy);\r\n}\r\n\r\nfunction dijkstra(grid, start, end) {\r\n\tstart.distance = 0;\r\n\tconst visitedNodes = [];\r\n\tconst allNodes = [];\r\n\tfor (const row of grid) {\r\n\t\tfor (const col of row)\r\n\t\t\tallNodes.push(col);\r\n\t}\r\n\twhile (allNodes.length) {\r\n\t\tsortNodesByDistance(allNodes);\r\n\t\tconst closest = allNodes.shift();\r\n\t\tif (closest.isWall) {\r\n\t\t\tconsole.log(closest.row, closest.col);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (closest.distance === Infinity)\r\n\t\t\treturn visitedNodes;\r\n\t\tclosest.visited = true;\r\n\t\tvisitedNodes.push(closest);\r\n\t\tupdateNeighbors(grid, closest);\r\n\t\tif (closest === end)\r\n\t\t\treturn visitedNodes;\r\n\t}\r\n}\r\n\r\nfunction isValid(grid, row, col) {\r\n\tif (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length)\r\n\t\treturn false;\r\n\treturn true;\r\n}\r\n\r\nfunction updateNeighbors(grid, curr) {\r\n\tconst neighbors = getUnvisitedNeighbors(grid, curr);\r\n\tfor (const node of neighbors) {\r\n\t\tnode.distance = curr.distance + 1;\r\n\t\tnode.prev = curr;\r\n\t}\r\n}\r\n\r\nfunction updateHeuristicNeighbors(grid, curr, end) {\r\n\tconst neighbors = getUnvisitedNeighbors(grid, curr);\r\n\tfor (const node of neighbors) {\r\n\t\tnode.distance = calculateHValue(node, end);\r\n\t\tnode.prev = curr;\r\n\t}\r\n}\r\n\r\nexport function getShortestPath(allNodes, start) {\r\n\tconst shortestPath = [];\r\n\tlet curr = allNodes[allNodes.length - 1];\r\n\t// curr = curr.prev;\r\n\twhile (curr !== start) {\r\n\t\tshortestPath.push(curr);\r\n\t\tconsole.log(curr);\r\n\t\tcurr = curr.prev;\r\n\t}\r\n\t// shortestPath.push(start);\r\n\tshortestPath.reverse();\r\n\treturn shortestPath;\r\n}\r\n\r\nfunction getUnvisitedNeighbors(grid, curr) {\r\n\tconst neighbors = [];\r\n\tconst { row, col } = curr;\r\n\tif (row > 0) neighbors.push(grid[row - 1][col]);\r\n\tif (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n\tif (col > 0) neighbors.push(grid[row][col - 1]);\r\n\tif (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\treturn neighbors.filter(neighbor => !neighbor.visited);\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n\tunvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction sortNodesByF(openList) {\r\n\topenList.sort((nodeA, nodeB) => nodeA.f - nodeB.f)\r\n}","import { Component } from \"react\";\r\nimport Node from \"./Node\";\r\nimport \"./Grid.css\";\r\nimport Algo, { getShortestPath } from \"./FindPath\";\r\nconst ROWS = 15;\r\nconst COLS = 50;\r\nconst START = [7, 15];\r\nconst END = [11, 25];\r\n\r\nexport default class PathFinder extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseDown: false,\r\n      start: START,\r\n      end: END,\r\n      startNodePressed: false,\r\n      endNodePressed: false,\r\n      changingWallAllowed: true,\r\n      algorithm: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    // console.log(grid);\r\n    this.setState({ grid: grid });\r\n  }\r\n\r\n  getInitialGrid() {\r\n    const grid = [];\r\n    for (let row = 0; row < ROWS; row++) {\r\n      const curr = [];\r\n      for (let col = 0; col < COLS; col++) {\r\n        curr.push(getNode(row, col));\r\n      }\r\n      grid.push(curr);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  setAlgo(name) {\r\n    this.setState({ algorithm: name });\r\n  }\r\n\r\n  animateAlgorithm(allNodes, shortestPath, last) {\r\n    for (let i = 0; i < allNodes.length; i++) {\r\n      const node = allNodes[i];\r\n      if (\r\n        !(node.row === this.state.end[0] && node.col === this.state.end[1]) &&\r\n        !(node.row === this.state.start[0] && node.col === this.state.start[1])\r\n      )\r\n        setTimeout(() => {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-visited\";\r\n        }, 10 * i);\r\n      if (\r\n        i === allNodes.length - 1 &&\r\n        last.row === this.state.end[0] &&\r\n        last.col === this.state.end[1]\r\n      ) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(shortestPath);\r\n        }, 10 * i);\r\n      }\r\n    }\r\n  }\r\n\r\n  animateShortestPath(shortestPath) {\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      setTimeout(() => {\r\n        const node = shortestPath[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest\";\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visuaizeAlgorithm() {\r\n    const { grid } = this.state;\r\n    // console.log('grid', grid)\r\n    console.log(\"start\", this.state.start);\r\n    console.log(\"end\", this.state.end);\r\n    const start = grid[this.state.start[0]][this.state.start[1]];\r\n    const end = grid[this.state.end[0]][this.state.end[1]];\r\n    if (this.state.algorithm === \"\") return;\r\n    console.log(\"algorithm\", this.state.algorithm);\r\n    const allNodes = Algo(grid, start, end, this.state.algorithm);\r\n    const last = allNodes[allNodes.length - 1];\r\n    console.log(allNodes);\r\n    if(this.state.algorithm === 'BiBFS'){\r\n      console.log('Last ', last)\r\n      this.clearPath();\r\n      const al1 = Algo(grid, start, last, 'BFS');\r\n      const sp1 = getShortestPath(al1, start);\r\n      this.clearPath();\r\n      const al2 = Algo(grid, last, end, 'BFS');\r\n      const sp2 = getShortestPath(al2, last);\r\n      const shortestPath = sp1.concat(sp2);\r\n      this.animateAlgorithm(allNodes, shortestPath, end);\r\n    }\r\n    else{\r\n      const shortestPath = getShortestPath(allNodes, start);\r\n      console.log(shortestPath);\r\n      // const shortestPath = [];\r\n      this.animateAlgorithm(allNodes, shortestPath, last);\r\n    }\r\n  }\r\n\r\n  clearBoard() {\r\n    const { grid } = this.state;\r\n    for (let row = 0; row < ROWS; row++) {\r\n      for (let col = 0; col < COLS; col++) {\r\n        grid[row][col].isWall = false;\r\n        grid[row][col].distance = Infinity;\r\n        grid[row][col].visited = false;\r\n        grid[row][col].prev = null;\r\n        grid[row][col].f = Infinity;\r\n        grid[row][col].g = Infinity;\r\n        grid[row][col].heuristic = Infinity;\r\n        document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n      }\r\n    }\r\n    document.getElementById(`node-${START[0]}-${START[1]}`).className =\r\n      \"node node-start\";\r\n    document.getElementById(`node-${END[0]}-${END[1]}`).className =\r\n      \"node node-end\";\r\n    this.setState({ grid: grid, start: START, end: END });\r\n  }\r\n\r\n  clearPath() {\r\n    const { grid } = this.state;\r\n    for (let row = 0; row < ROWS; row++) {\r\n      for (let col = 0; col < COLS; col++) {\r\n        // grid[row][col].isWall = false;\r\n        grid[row][col].prev = null;\r\n        grid[row][col].distance = Infinity;\r\n        grid[row][col].visited = false;\r\n        grid[row][col].f = Infinity;\r\n        grid[row][col].g = Infinity;\r\n        grid[row][col].heuristic = Infinity;\r\n        if (grid[row][col].isWall === true) continue;\r\n        if (row === this.state.start[0] && col === this.state.start[1])\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            \"node node-start\";\r\n        else if (row === this.state.end[0] && col === this.state.end[1])\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            \"node node-end\";\r\n        else document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n      }\r\n    }\r\n    this.setState({ grid: grid }, () => {\r\n      console.log(this.state.grid);\r\n    });\r\n  }\r\n\r\n  onMouseEnter(row, col) {\r\n    if (this.state.mouseDown === false) return;\r\n    const { grid } = this.state;\r\n    if (\r\n      this.state.startNodePressed === true &&\r\n      grid[row][col].isWall === false\r\n    ) {\r\n      console.log(\r\n        \"Line 132, row: \",\r\n        row,\r\n        \" col: \",\r\n        col,\r\n        \"grid\",\r\n        grid[row][col]\r\n      );\r\n      this.setState({ start: [row, col] }, () => {\r\n        console.log(\"LINE 152 \", this.state.start);\r\n      });\r\n      document.getElementById(`node-${row}-${col}`).className =\r\n        \"node node-start\";\r\n      console.log(\"grid\", grid);\r\n    } else if (\r\n      this.state.endNodePressed === true &&\r\n      grid[row][col].isWall === false\r\n    ) {\r\n      this.setState({ end: [row, col] }, () => {\r\n        // console.log('LINE 152 ', this.state.start)\r\n      });\r\n      document.getElementById(`node-${row}-${col}`).className = \"node node-end\";\r\n    } else if (\r\n      this.state.startNodePressed === false &&\r\n      this.state.endNodePressed === false\r\n    ) {\r\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid, mouseDown: true });\r\n    }\r\n  }\r\n\r\n  onMouseLeave(row, col) {\r\n    if (\r\n      this.state.startNodePressed === false &&\r\n      this.state.endNodePressed === false\r\n    )\r\n      return;\r\n    // if(\r\n    // \t(row === this.state.start[0] && col === this.state.start[1]) ||\r\n    // \t(row === this.state.end[0] && col === this.state.end[1])\r\n    // )\r\n    const { grid } = this.state;\r\n    if (\r\n      grid[row][col].isWall === true &&\r\n      this.state.changingWallAllowed === false\r\n    )\r\n      return;\r\n    document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n    // console.log('here')\r\n    grid[row][col].isWall = false;\r\n    grid[row][col].prev = null;\r\n    grid[row][col].distance = Infinity;\r\n    grid[row][col].visited = false;\r\n    this.setState({ grid: grid });\r\n  }\r\n\r\n  onMouseDown(row, col) {\r\n    if (\r\n      !(\r\n        (row === this.state.start[0] && col === this.state.start[1]) ||\r\n        (row === this.state.end[0] && col === this.state.end[1])\r\n      )\r\n    ) {\r\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid });\r\n    } else if (row === this.state.start[0] && col === this.state.start[1]) {\r\n      this.setState({ startNodePressed: true }, () => {\r\n        console.log(\"startNodePressed set to true\");\r\n      });\r\n      this.setState({ changingWallAllowed: false });\r\n    } else if (row === this.state.end[0] && col === this.state.end[1]) {\r\n      this.setState({ endNodePressed: true }, () => {\r\n        console.log(\"endNodePressed set to true\");\r\n      });\r\n      this.setState({ changingWallAllowed: false });\r\n    }\r\n    this.setState({ mouseDown: true });\r\n  }\r\n\r\n  onMouseUp(row, col) {\r\n    if (row === this.state.start[0] && col === this.state.start[1]) {\r\n      this.setState({ startNodePressed: false });\r\n      this.setState({ changingWallAllowed: true });\r\n    } else if (row === this.state.end[0] && col === this.state.end[1]) {\r\n      this.setState({ endNodePressed: false });\r\n      this.setState({ changingWallAllowed: true });\r\n    }\r\n    this.setState({ mouseDown: false });\r\n  }\r\n\r\n  presentable() {\r\n    if (this.state.algorithm === \"Dijkstra\") return \"Dijstra's!\";\r\n    if (this.state.algorithm === \"AStar\") return \"A* Search!\";\r\n    if (this.state.algorithm === \"BFS\") return \"BFS!\";\r\n    if (this.state.algorithm === \"DFS\") return \"DFS!\";\r\n    if (this.state.algorithm === \"GBFS\") return \"Greedy BFS!\";\r\n    if (this.state.algorithm === \"BiBFS\") return \"Bidirectional BFS!\";\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <>\r\n        <nav class=\"navbar navbar-dark bg-dark navbar-expand-sm\">\r\n          <a class=\"navbar-brand fsize pad\" href=\"#\">\r\n            PathFinder\r\n          </a>\r\n          {/* <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbar-list-3\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n\t\t\t\t\t\t<span class=\"navbar-toggler-icon\"></span>Hello\r\n\t\t\t\t\t</button> */}\r\n          <div class=\"collapse navbar-collapse\" id=\"navbar-list-3\">\r\n            <ul class=\"navbar-nav\">\r\n              <li class=\"nav-item dropdown\">\r\n                <a\r\n                  class=\"nav-link dropdown-toggle cwhite fsize algo\"\r\n                  href=\"#\"\r\n                  id=\"navbarDropdownMenuLink\"\r\n                  role=\"button\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Algorithms\r\n                </a>\r\n                <div\r\n                  class=\"dropdown-menu bg-dark\"\r\n                  aria-labelledby=\"navbarDropdownMenuLink\"\r\n                >\r\n                  <a\r\n                    class=\"dropdown-item cwhite\"\r\n                    href=\"#\"\r\n                    onClick={() => this.setAlgo(\"Dijkstra\")}\r\n                  >\r\n                    Dijkstra\r\n                  </a>\r\n                  <a\r\n                    class=\"dropdown-item cwhite\"\r\n                    href=\"#\"\r\n                    onClick={() => this.setAlgo(\"AStar\")}\r\n                  >\r\n                    A* Search\r\n                  </a>\r\n                  <a\r\n                    class=\"dropdown-item cwhite\"\r\n                    href=\"#\"\r\n                    onClick={() => this.setAlgo(\"BFS\")}\r\n                  >\r\n                    BFS\r\n                  </a>\r\n                  <a\r\n                    class=\"dropdown-item cwhite\"\r\n                    href=\"#\"\r\n                    onClick={() => this.setAlgo(\"DFS\")}\r\n                  >\r\n                    DFS\r\n                  </a>\r\n                  <a\r\n                    class=\"dropdown-item cwhite\"\r\n                    href=\"#\"\r\n                    onClick={() => this.setAlgo(\"GBFS\")}\r\n                  >\r\n                    Greedy Best First\r\n                  </a>\r\n                  <a\r\n                    class=\"dropdown-item cwhite\"\r\n                    href=\"#\"\r\n                    onClick={() => this.setAlgo(\"BiBFS\")}\r\n                  >\r\n                    Bidirectional BFS\r\n                  </a>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n        <button\r\n          className=\"container vertical-center bg-dark cwhite fsize\"\r\n          onClick={() => this.visuaizeAlgorithm()}\r\n        >\r\n          Visualize {this.presentable()}\r\n        </button>\r\n        <button\r\n          className=\"container clear-board bg-dark cwhite fsize\"\r\n          onClick={() => this.clearBoard()}\r\n        >\r\n          Clear Board\r\n        </button>\r\n        <button\r\n          className=\"container clear-path bg-dark cwhite fsize\"\r\n          onClick={() => this.clearPath()}\r\n        >\r\n          Clear Path\r\n        </button>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx} className=\"rowgap\">\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isWall } = node;\r\n                  const isStart =\r\n                    row === this.state.start[0] && col === this.state.start[1]\r\n                      ? true\r\n                      : false;\r\n                  const isEnd =\r\n                    row === this.state.end[0] && col === this.state.end[1]\r\n                      ? true\r\n                      : false;\r\n                  return (\r\n                    <Node\r\n                      row={row}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isEnd={isEnd}\r\n                      isWall={isWall}\r\n                      onMouseEnter={(row, col) => this.onMouseEnter(row, col)}\r\n                      onMouseDown={(row, col) => this.onMouseDown(row, col)}\r\n                      onMouseUp={(row, col) => this.onMouseUp(row, col)}\r\n                      onMouseLeave={(row, col) => this.onMouseLeave(row, col)}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getNode = (row, col) => {\r\n  return {\r\n    row,\r\n    col,\r\n    distance: Infinity,\r\n    visited: false,\r\n    prev: null,\r\n    isWall: false,\r\n    f: Infinity,\r\n    g: Infinity,\r\n    heuristic: Infinity,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import './App.css';\nimport PathFinder from './Grid'\nfunction App() {\n  return (\n    <div>\n      <PathFinder />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}